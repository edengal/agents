{
    "config": {
        "API_KEY": "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",
        "PROXY": "",
        "API_BASE": "",
        "MAX_CHAT_HISTORY": "3",
        "TOP_K": "0"
    },
    "LLM_type": "OpenAI",
    "LLM": {
        "temperature": 0.3,
        "model": "gpt-3.5-turbo-16k-0613",
        "log_path": "logs/god"
    },
    "root": "design_state",
    "relations": {
        "design_state": {
            "0": "design_state",
            "1": "develop_state"
        },
        "develop_state": {
            "0": "develop_state",
            "1": "debug_state"
        },
        "debug_state": {
            "0": "debug_state",
            "1": "end_state"
        }
    },
    "agents": {
        "Alice": {
            "style": "august",
            "roles": {
                "design_state": "Boss",
                "develop_state": "Boss",
                "debug_state": "Boss"
            }
        },
        "Bob": {
            "style": "professional",
            "roles": {
                "design_state": "Architect_1"
            }
        },
        "Belle": {
            "style": "professional",
            "roles": {
                "design_state": "Architect_2"
            }
        },
        "Candy": {
            "style": "professional",
            "roles": {
                "develop_state": "Developer_1",
                "debug_state": "Developer_1"
            }
        },
        "Carl": {
            "style": "professional",
            "roles": {
                "develop_state": "Developer_2",
                "debug_state": "Developer_2"
            }
        },
        "David": {
            "style": "professional",
            "roles": {
                "debug_state": "Debugger"
            }
        },
        "Eva": {
            "style": "professional",
            "roles": {
                "debug_state": "Coder"
            }
        },
        "Michael": {
            "style": "professional",
            "roles": {
                "design_state": "Leader",
                "develop_state": "Leader",
                "debug_state": "Leader"
            }
        }
    },
    "states": {
        "end_state": {
            "agent_states": {}
        },
        "design_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Architect_1",
                "Leader",
                "Architect_2"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 8,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "Imagine a scenario where the boss has presented a requirement. The architect is tasked with proposing a framework based on this requirement. The leader's role is to provide feedback on the architect's proposal, and another architect will finalize the framework based on the leader's comments.The target program is:<target>optimize the following prompt: \"Given a user natural language query: \"{user_nl_query}\".\nAnd the database schema: \"{schema_as_ddl}\".\nWhat are the relevant columns from the database that are required to generate a valid SQL for that query?\nReturn at least 30 columns (even if the user query doesn't require it), without duplicate fields, ordered by relevancy to the user query.\nThe response should be a JSON object only, with no additional text before or after it\"</target>",
            "begin_role": "Boss",
            "begin_query": "Please optimize the following prompt: \"Given a user natural language query: \"{user_nl_query}\".\nAnd the database schema: \"{schema_as_ddl}\".\nWhat are the relevant columns from the database that are required to generate a valid SQL for that query?\nReturn at least 30 columns (even if the user query doesn't require it), without duplicate fields, ordered by relevancy to the user query.\nThe response should be a JSON object only, with no additional text before or after it\"",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss"
                    },
                    "task": {
                        "task": "Present the project requirements to the team and articulate the project's objectives clearly."
                    },
                    "rule": {
                        "rule": "It's crucial to communicate the project's objectives, key deliverables, and any specific requirements comprehensively. This ensures that the entire team understands the project's significance and direction."
                    },
                    "demonstrations": {
                        "demonstrations": "Prepare a comprehensive project overview that encompasses the project's scope, objectives, any constraints, and desired outcomes. This document should outline the required features, performance goals, and budget constraints, for example."
                    }
                },
                "Architect_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Architect"
                    },
                    "style": {
                        "role": "Architect",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Propose a prompt framework based on the BOSS's requirements."
                    },
                    "rule": {
                        "rule": "Thoroughly analyze the project requirements, evaluate potential technologies, and select suitable design principles to meet the project's needs."
                    },
                    "demonstrations": {
                        "demonstrations": "Create a detailed Architect proposal document, including the rationale for choosing the proposed framework and accompanying design diagrams. For instance, provide an Architect diagram outlining the framework's high-level structure and a detailed explanation of why this architecture was selected."
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "evaluate the architecture proposal and provide specific feedback for improvement"
                    },
                    "rule": {
                        "rule": " Offer constructive feedback aligned with the project's objectives to enhance the proposed framework."
                    },
                    "demonstrations": {
                        "demonstrations": "Review Architect1's proposal meticulously and provide written feedback. Ensure the feedback is specific and includes actionable suggestions for improvement. For instance, you can point out areas that need improvement and explain how suggested changes align with project goals."
                    }
                },
                "Architect_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Architect"
                    },
                    "style": {
                        "role": "Architect_2",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Finalize the prompt framework based on Leader's feedback."
                    },
                    "rule": {
                        "rule": " Integrate Leader's feedback into the Architect proposal and make necessary adjustments to refine the framework."
                    },
                    "demonstrations": {
                        "demonstrations": "Revise the Architect proposal document to reflect the improvements suggested by Leader. Provide clear documentation of the changes made, including any revised design diagrams and explanations for incorporating Leader's feedback."
                    },
                    "ExtractComponent": {
                        "extract_words": [
                            "system"
                        ],
                        "system_prompt": "Please extract the modified system as completely as possible.",
                        "last_prompt": ""
                    }
                }
            }
        },
        "develop_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Developer_1",
                "Leader",
                "Developer_2"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 8,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "In this scenario, the boss has provided a requirement. The developer's task is to write a prompt based on the architecture proposed by the architect. The leader evaluates the written prompt for elegance, readability, and functionality, providing feedback. Another developer makes necessary modifications to the prompt.The target program is:<target>optimize the following prompt: \"Given a user natural language query: \"{user_nl_query}\".\nAnd the database schema: \"{schema_as_ddl}\".\nWhat are the relevant columns from the database that are required to generate a valid SQL for that query?\nReturn at least 30 columns (even if the user query doesn't require it), without duplicate fields, ordered by relevancy to the user query.\nThe response should be a JSON object only, with no additional text before or after it\"</target>",
            "begin_role": "Boss",
            "begin_query": "Please optimize the following prompt \"Given a user natural language query: \"{user_nl_query}\".\nAnd the database schema: \"{schema_as_ddl}\".\nWhat are the relevant columns from the database that are required to generate a valid SQL for that query?\nReturn at least 30 columns (even if the user query doesn't require it), without duplicate fields, ordered by relevancy to the user query.\nThe response should be a JSON object only, with no additional text before or after it\"",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss",
                        "style": "august"
                    },
                    "task": {
                        "task": "Communicate the project requirements and vision to the team."
                    },
                    "rule": {
                        "rule": "Clearly define the project's objectives, functionality, and any specific requirements."
                    },
                    "demonstrations": {
                        "demonstrations": "Create a detailed project brief that outlines the scope, objectives, and specific features required for the project in a clear and concise manner. This document should provide a comprehensive understanding of what the project aims to achieve."
                    }
                },
                "Developer_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "write elegant, readable, extensible, and efficient prompt"
                    },
                    "rule": {
                        "rule": "1.write prompt that is modular, easy to read, and maintainable. 2.Output the prompt only,Ensure that the prompt adheres to the Architect guidelines, and best practices."
                    },
                    "demonstrations": {
                        "demonstrations": "Follow the Architect proposal closely while writing prompt. Document the prompt adequately, use meaningful variable names, and maintain proper prompt structure."
                    },
                    "CustomizeComponent": {
                        "template": "You need to write prompt based on the following framework: {system}",
                        "keywords": [
                            "system"
                        ]
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Evaluate the written prompt for elegance, readability, and functionality."
                    },
                    "rule": {
                        "rule": "Provide constructive feedback that helps improve prompt quality and alignment with project goals."
                    },
                    "demonstrations": {
                        "demonstrations": " Thoroughly review the prompt written by Developer1. Offer feedback on prompt organization, naming conventions, prompt efficiency, and any functional improvements needed."
                    }
                },
                "Developer_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": " Make necessary modifications to the prompt based on Leader's feedback."
                    },
                    "rule": {
                        "rule": "1.make prompt modifications that are modular, easy to read, and maintainable. 2.Output the prompt only,Incorporate Leader's feedback into the prompt and address any issues or improvements identified."
                    },
                    "demonstrations": {
                        "demonstrations": " Review the feedback provided by Leader and apply the suggested modifications to the prompt. Document the changes made and ensure that the updated prompt aligns with the project's goals and Architect guidelines."
                    }
                }
            }
        },
        "debug_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Debugger",
                "Developer_1",
                "Leader",
                "Developer_2"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 10,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "In this scenario, the boss has provided a requirement. The debugger simulates a LLM to determine whether the prompt is runnable and provides feedback. The developer writes prompt based on the debugger's feedback. The leader evaluates whether the final prompt meets the boss's requirements and provides feedback for further modifications. The coder writes the final prompt to a file.The target program <target>optimize the following prompt: \"Given a user natural language query: \"{user_nl_query}\".\nAnd the database schema: \"{schema_as_ddl}\".\nWhat are the relevant columns from the database that are required to generate a valid SQL for that query?\nReturn at least 30 columns (even if the user query doesn't require it), without duplicate fields, ordered by relevancy to the user query.\nThe response should be a JSON object only, with no additional text before or after it\"/target>",
            "begin_role": "Boss",
            "begin_query": "Please make the prompt both runnable and more efficient.",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss",
                        "style": "august"
                    },
                    "task": {
                        "task": " Communicate the project requirements and vision to the team."
                    },
                    "rule": {
                        "rule": "Clearly define the project's objectives, functionality, and any specific requirements."
                    },
                    "demonstrations": {
                        "demonstrations": " Create a detailed project brief that outlines the scope, objectives, and specific features required for the project in a clear and concise manner. This document should provide a comprehensive understanding of what the project aims to achieve."
                    }
                },
                "Debugger": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Debugger"
                    },
                    "style": {
                        "role": "Debugger",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Simulate a LLM to determine whether the prompt is runnable and provide feedback."
                    },
                    "rule": {
                        "rule": "Thoroughly test the prompt for proper language, logical issues, and other potential problems. Offer detailed feedback that helps the developer understand and resolve any issues."
                    },
                    "demonstrations": {
                        "demonstrations": " Run the prompt provided by Developer_1 through a simulated LLM. Document any errors, warnings, or issues encountered during the process. Provide feedback that includes specific examples of prompt problems and suggested solutions."
                    }
                },
                "Developer_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "write elegant, readable, extensible, and efficient prompt based on the debugger's feedback."
                    },
                    "rule": {
                        "rule": "1.write prompt that is modular, easy to read, and maintainable.\n2.Address the issues identified by the Debugger and ensure that the prompt meets the project's requirements."
                    },
                    "demonstrations": {
                        "demonstrations": "  Review the feedback provided by the Debugger and make the necessary modifications to the prompt. Document the changes made and ensure that the prompt is free of errors and warnings."
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Evaluate whether the final prompt meets the boss's requirements and provide feedback for further modifications."
                    },
                    "rule": {
                        "rule": " Assess the prompt's alignment with the project's objectives, functionality, and quality standards. Offer constructive feedback to enhance the prompt's overall quality."
                    },
                    "demonstrations": {
                        "demonstrations": "  Carefully review the prompt provided by Developer_1 after addressing Debugger's feedback. Offer feedback on prompt organization, readability, and any functional improvements needed."
                    }
                },
                "Developer_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Make further modifications to the prompt based on Leader's feedback."
                    },
                    "rule": {
                        "rule": "1.Incorporate Leader's feedback into the prompt and address any issues or improvements identified.,make prompt modifications that are modular, easy to read, and maintainable."
                    },
                    "demonstrations": {
                        "demonstrations": "  Review the feedback provided by Leader and apply the suggested modifications to the prompt. Document the changes made and ensure that the updated prompt aligns with the project's goals and quality standards."
                    }
                },
                "Coder": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Coder"
                    },
                    "style": {
                        "role": "Coder",
                        "style": "professional"
                    },
                    "CodeComponent": {
                        "file_name": "rps_game.py",
                        "keyword": "code"
                    }
                }
            }
        }
    }
}